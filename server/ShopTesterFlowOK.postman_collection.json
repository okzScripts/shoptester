{
	"info": {
		"_postman_id": "a4c1a370-e2da-4352-a123-1b7051f1391b",
		"name": "ShopTesterFlowOK",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43555386",
		"_collection_link": "https://oskarkrantz.postman.co/workspace/Oskar-Krantz's-Workspace~0c713680-3299-467d-802e-c7950fac3980/collection/43555386-a4c1a370-e2da-4352-a123-1b7051f1391b?action=share&source=collection_link&creator=43555386"
	},
	"item": [
		{
			"name": "(2.1)LoginAdmin Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\"), function(){",
							"    pm.response.to.have.status(200);",
							"}",
							"",
							"pm.test(\"Is cookie recieved?\", function(){",
							"    pm.cookies.has(\"id\")});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"admin123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "(1.2+3)GetAllP Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponseData = pm.response.json();",
							"",
							"pm.test(\"Is the response body an array?\", function () {",
							"    pm.expect(Array.isArray(jsonResponseData)).to.be.true})",
							"",
							"pm.test(\"Is the statuscode 200?\", function (){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "(1.5)GetProductById Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponseData = pm.response.json();",
							"",
							"pm.test(\"Check if id is 5\", function () {",
							"    pm.expect(jsonResponseData.id).to.eql(5);});",
							"",
							"pm.test(\"Check if statuscode is 200\", function(){",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "(1.4)GetAllC Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponseData = pm.response.json();",
							"",
							"pm.test(\"Is the response an Array?\", function () {",
							"    pm.expect(Array.isArray(jsonResponseData)).to.be.true;",
							"})",
							"",
							"pm.test(\"Is the response code 200?\", function (){",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/categories",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "(2.2)CreateCat Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataJson = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"",
							"",
							"    if (responseDataJson.insertId) {",
							"        pm.environment.set(\"category_id\", responseDataJson.insertId);",
							"    }",
							"})",
							"console.log(\"Category ID:\", pm.environment.get(\"category_id\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Toilets4\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/categories",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "(2.3)CreateProduct Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataJson = pm.response.json();",
							"",
							"console.log(\"Category ID:\", pm.environment.get(\"category_id\"));",
							"",
							"pm.test(\"Is statuscode 200?\", function () {",
							"    pm.response.to.have.status(201);",
							"})",
							"",
							"pm.environment.set(\"product_id\", responseDataJson.insertId)",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"PoopMaster 5000\",\n    \"price\": \"69000\",\n    \"categoryId\": \"{{category_id}}\"\n}\n//UNIQUE CONSTRAINT PÅ NAME, GÅR EJ ATT SKAPA DUPLICAT\n\n//401 UNAUTHORIZED NÄR UTLOGGAD",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "(2.3)CreateProduct FAIL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataJson = pm.response.json();",
							"",
							"console.log(\"Category ID:\", pm.environment.get(\"category_id\"));",
							"",
							"pm.test(\"Is statuscode 409?\", function () {",
							"    pm.response.to.have.status(409);",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"PoopMaster 5000\",\n    \"price\": \"69000\",\n    \"categoryId\": \"{{category_id}}\"\n}\n//UNIQUE CONSTRAINT PÅ NAME, GÅR EJ ATT SKAPA DUPLICAT\n\n//401 UNAUTHORIZED NÄR UTLOGGAD",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "(2.5)UpdateProduct Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataJson = pm.response.json();",
							"",
							"pm.test(\"Is statusCode 200?\", function (){",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": \"420000\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(2.6)DeleteProduct Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataText = pm.response.text();",
							"",
							"pm.test(\"Statuscode is 404\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteCat Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"responseBody = pm.response.json();",
							"",
							"pm.test(\"is Statuscode 200?\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/categories/{{category_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"categories",
						"{{category_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateUser Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\", function (){",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.environment.set(\"user_id\", responseData.insertId);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Pilot99\",\n    \"email\": \"piloten@mail.com\",\n    \"password\": \"hej12345\",\n    \"RoleID\": \"2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout Admin 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataJson = pm.response.json();",
							"",
							"pm.test(\"Response message is 'Logged out'\", function () {",
							"    pm.expect(responseDataJson.message).to.eql(\"Logged out\")});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginUser Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"email\": \"piloten@mail.com\",\n\"password\": \"hej12345\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "(1.2+3)GetAllP Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponseData = pm.response.json();",
							"",
							"pm.test(\"Is the response body an array?\", function () {",
							"    pm.expect(Array.isArray(jsonResponseData)).to.be.true})",
							"",
							"pm.test(\"Is the statuscode 200?\", function (){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "MakeOrder 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\",function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.environment.set(\"order_id\", responseData.insertId);",
							"",
							"pm.environment.set(\"order_total\", responseData.total);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ProductId\": \"5\",\n    \"Quantity\": \"3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "MakeOrder 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\",function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.environment.set(\"order2_id\", responseData.insertId);",
							"",
							"pm.environment.set(\"order2_total\", responseData.total);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ProductId\": \"5\",\n    \"Quantity\": \"3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "MakeOrder Copy 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\",function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.environment.set(\"order3_id\", responseData.insertId);",
							"",
							"pm.environment.set(\"order3_total\", responseData.total);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ProductId\": \"5\",\n    \"Quantity\": \"3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataJson = pm.response.json();",
							"",
							"pm.test(\"Response message is 'Logged out'\", function () {",
							"    pm.expect(responseDataJson.message).to.eql(\"Logged out\")});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "(2.1)LoginAdmin Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonResponseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\"), function(){",
							"    pm.response.to.have.status(200);",
							"}",
							"",
							"pm.test(\"Is cookie recieved?\", function(){",
							"    pm.cookies.has(\"id\")});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"admin123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrdersById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is status code 200?\", function () {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user/{{user_id}}/orders",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user",
						"{{user_id}}",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteOrder 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is Statuscode 200?\", function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders/{{order_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"{{order_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteOrder 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is Statuscode 200?\", function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders/{{order2_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"{{order2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteOrder 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is Statuscode 200?\", function(){",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/orders/{{order3_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"orders",
						"{{order3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUser Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Is statuscode 200?\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout admin 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseDataJson = pm.response.json();",
							"",
							"pm.test(\"Response message is 'Logged out'\", function () {",
							"    pm.expect(responseDataJson.message).to.eql(\"Logged out\")});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}